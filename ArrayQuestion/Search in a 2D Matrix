Problem Link : https://leetcode.com/problems/search-a-2d-matrix/




                     *********CODE**********
                     
                     
                     
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        return search(matrix , target);
    }
    
    
    
    public boolean search(int [][] matrix , int target){
        int row = matrix.length;
        int col = matrix[0].length;
        
//         if(matrix[0].length == 1)        //case if matrix only has one row
//         {
//             for(int i = 0; i < matrix.length; ++i)
//                 if(matrix[i][0] == target)
//                     return true;
//             return false;
//         }
        
        if(row == 1){
            return binarySearch(matrix , row , 0 , col - 1 , target);
        }
        
        
        int rStart = 0;
        int rEnd = row - 1;
        int cMid = col/2;
        
        while(rStart < (rEnd - 1)){
            int mid = rStart + (rEnd - rStart)/2;
            if(target == matrix[mid][cMid]){
                return true;
            }
            if(target < matrix[mid][cMid]){
                rEnd = mid;
            }else{
                rStart = mid;
            }
        }
        
        if(target == matrix[rStart][cMid]){
            return true;
        }
        if(target == matrix[rStart + 1][cMid]){
            return true;
        }
        
        // check in first half
        if(target <= matrix[rStart][cMid - 1]){
            return binarySearch(matrix ,rStart , 0 , cMid - 1 , target);
        }
        // search in 2nd half
        if(target >=matrix[rStart][cMid + 1] && target <=matrix[rStart][col - 1]){
            return binarySearch(matrix , rStart , cMid - 1 , col - 1 , target);
        }
        // search in 3rd half
        if(target <= matrix[rStart + 1][cMid - 1]){
            return binarySearch(matrix , rStart + 1 , 0 , cMid - 1 , target);
        }
        // search in 4th half
        // if(target >= matrix[rStart + 1][cMid +1])
        else{
            return binarySearch(matrix , rStart + 1 , cMid + 1 , col - 1 , target);
        }
        
        
    }
    
    
    
    
    
    public boolean binarySearch(int[][] matrix , int row , int cStart , int cEnd , int target){
        while(cStart <= cEnd){
           int mid = cStart + (cEnd - cStart)/2;
           if(target == matrix[row][mid]){
              return true;
             }
           if(target < matrix[row][mid]){
               cEnd = mid - 1;
           }else{
               cStart = mid + 1;
           }
        }
        return false;
    }
}
